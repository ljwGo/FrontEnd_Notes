// 极少数情况下，你可能需要捕获子元素上的所有事件，即便它们阻止了传播。
// 例如，你可能想对每次点击进行埋点记录，传播逻辑暂且不论。
// 那么你可以通过在事件名称末尾添加 Capture 来实现这一点：

// <div onClickCapture={() => { /* 这会首先执行 */ }}>
//   <button onClick={e => e.stopPropagation()} />
//   <button onClick={e => e.stopPropagation()} />
// </div>

// e.preventDefault() 阻止少数事件的默认浏览器行为。

// 每个事件分三个阶段传播：
// 它向下传播，调用所有的 onClickCapture 处理函数。
// 它执行被点击元素的 onClick 处理函数。
// 它向上传播，调用所有的 onClick 处理函数。
// 捕获事件对于路由或数据分析之类的代码很有用，但你可能不会在应用程序代码中使用它们。

// 从子组件显式调用事件处理函数 prop 是事件传播的另一种优秀替代方案。
// 例如，假设你有一个按钮，当它被点击时，你想在父组件中记录日志。
// 你可以从子组件中调用父组件的事件处理函数，而不是使用事件传播。